@using OfficeSpace.Models.Master
@model MasterModel

@{
    ViewBag.Title = "Master";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/css/slickgrid")

<style>
    #masterGrid {
        height: 100%;
    }

    /*.slick-header-column.ui-state-default {
        background: none;
        background-color: #505050;
        color: #eeeeee;
        border: none;
        padding: 0;
        text-shadow: none;
        font-family: Arial, Verdana, Helvetica, sans-serif;
        font-size: 13px;
        height: 40px;
        line-height: 40px;
    }

    .slick-row.ui-widget-content, .slick-cell {
        background: none;
        background-color: #eeeeee;
        color: #666666;
        border: none;
        border-bottom: solid 1px #ffffff;
        font-size: 14px;
        height: 60px;
        line-height: 60px;
        padding: 0 5px;
    }*/

    .toggle {
        height: 9px;
        width: 9px;
        display: inline-block;
    }

    .custom-column-width {
        width: 14%;
    }
</style>

<h2>@ViewBag.Title</h2>
<hr />

<div class="row">
    @Html.Partial("_FilterPartial")
</div>

<div class="row">
    <div class="slickgrid-container">
        <div id="masterGrid"></div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/slickgrid-basic")

    <script type="text/javascript">

        var filterLocationId = 0;
        var filterBuildingId, filterFloorId, filterUnitId;

        $(document).ready(function () {
            $.ajaxSetup({ cache: false });

            var runFiltersInterval = null;

            $("#ddownLocationSelection").on('change', function () {
                var currentLocationId = parseInt($(this).val());
                if (currentLocationId === 0) {
                    // reset Building Selection
                    $("#ddownBuildingSelection").find('option').remove().end();
                    $("#ddownBuildingSelection").append($("<option />").text("Please select a Location"));
                    $('#ddownBuildingSelection').trigger('change');
                } else {
                    populateDropDown(currentLocationId, 'select#ddownBuildingSelection', 0);
                }

                // update tree
                if (filterLocationId !== currentLocationId) {

                    //Slick.GlobalEditorLock.cancelCurrentEdit();

                    //window.clearTimeout(runFiltersInterval);
                    //runFiltersInterval = window.setTimeout(updateFilter, 10);

                    filterLocationId = currentLocationId;
                }
            });

            $("#ddownBuildingSelection").on('change', function () {
                var currentBuildingId = parseInt($(this).val());
                if (isNaN(currentBuildingId) || currentBuildingId === 0) {
                    // reset Floor Selection
                    $("#ddownFloorSelection").find('option').remove().end();
                    $("#ddownFloorSelection").append($("<option />").text("Please select a Building"));
                    $("#ddownFloorSelection").trigger('change');
                } else {
                    populateDropDown(currentBuildingId, 'select#ddownFloorSelection', 1);
                }

                if (filterBuildingId !== currentBuildingId) {

                    //window.clearTimeout(runFiltersInterval);
                    //runFiltersInterval = window.setTimeout(updateFilter, 10);

                    filterBuildingId = currentBuildingId;
                }
            });

            $("#ddownFloorSelection").on('change', function () {
                var currentFloorId = parseInt($(this).val());
                if (isNaN(currentFloorId) || currentFloorId === 0) {
                    // reset Unit Selection
                    $("#ddownUnitSelection").find('option').remove().end();
                    $("#ddownUnitSelection").append($("<option />").text("Please select a Floor"));
                    $("#ddownUnitSelection").trigger('change');
                } else {
                    populateDropDown(currentFloorId, 'select#ddownUnitSelection', 2);
                }

                if (filterFloorId !== currentFloorId) {

                    //window.clearTimeout(runFiltersInterval);
                    //runFiltersInterval = window.setTimeout(updateFilter, 10);

                    filterFloorId = currentFloorId;
                }
            });

            $("#ddownUnitSelection").on('change', function () {
                var currentUnitId = parseInt($(this).val());

                if (filterUnitId !== currentUnitId) {

                    //window.clearTimeout(runFiltersInterval);
                    //runFiltersInterval = window.setTimeout(updateFilter, 10);

                    filterUnitId = currentUnitId;
                }
            });

            $('#btnFilter').click(function () {
                debugger;
                //var locationId = $("#ddownLocationSelection").val();
                //var buildingId = $("#ddownBuildingSelection").val();
                //var floorId = $("#ddownFloorSelection").val();
                //var wingId = $("#ddownUnitSelection").val();

                var paramObj = {
                    locationId: filterLocationId,
                    buildingId: filterBuildingId,
                    floorId: filterFloorId,
                    unitId: filterUnitId
                };
                var url = '@Url.Action("GetTreeGridJson", "Master")';

                $.getJSON(url, paramObj, function (response, status, xhr) {
                    debugger;
                    // hides meaniless columns
                    columns = $.grep(response.columns, function (col, idx) {
                        return col.field === 'itemId' || col.field === 'parent' || col.field === 'indent' || col.field === 'id' || col.field === 'createdDate' || col.field === 'updatedDate'
                    }, true);

                    columns.sort(function (col1, col2) {
                        return col1.field.localeCompare(col2.field);
                    });

                    columns[0].formatter = NodeNameFormatter;

                    grid.setColumns(columns);

                    data = response.data;

                    dataView.beginUpdate();

                    dataView.setItems(data);

                    //dataView.setFilterArgs({
                    //    locationId: filterLocationId,
                    //    buildingId: filterBuildingId,
                    //    floorId: filterFloorId,
                    //    unitId: filterUnitId
                    //});
                    //dataView.setFilter(treeFilter);
                    dataView.setFilter(myFilter);

                    dataView.endUpdate();

                    for (var i = 0; i < data.length; i++) {
                        grid.updateRow(i);
                    }

                    grid.invalidate();
                    grid.render();
                });
            });
        });

        var grid;
        var dataView;
        var columns = [];
        var data = [];

        var options = {
            editable: false,
            enableAddRow: false,
            enableCellNavigation: false,
            enableColumnReorder: false,
            asyncEditorLoading: true,
            forceFitColumns: true,
            autoHeight: true
        };

        var NodeNameFormatter = function (row, cell, value, columnDef, dataContext) {
            value = value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace( />/g, "&gt;");
            var spacer = "<span style='display:inline-block;height:1px;width:" + (20 * dataContext["indent"]) + "px'></span>";
            var idx = dataView.getIdxById(dataContext.id);

            if (data[idx + 1] && data[idx + 1].indent > data[idx].indent) {
                if (dataContext._collapsed) {
                    return spacer + " <span class='toggle glyphicon glyphicon-chevron-right'></span>&nbsp;&nbsp;<b>" + value + "</b>";
                } else {
                    return spacer + " <span class='toggle glyphicon glyphicon-chevron-down'></span>&nbsp;&nbsp;" + value;
                }
            } else {
                return spacer + " <span class='toggle'></span>&nbsp;&nbsp;" + value;
            }
        };

        var columns = [
          { id: "name", name: "Name", field: "name", formatter: NodeNameFormatter },
          { id: "code", name: "Code", field: "code" }
        ];

        var nameSearchString = '';

        function myFilter(item, args) {
            //debugger;
            //if (args.locationId > 0) {

                //if (args.buildingId === 0) {
                //    // display all buildings
                //} else {

                //    if (item.indent !== 1 || item.itemId !== args.locationId || item.itemId !== args.buildingId) {
                //        return false;
                //    }
                //}

                //if (item.indent > 0 || item.itemId !== args.locationId) {
                //    return false;
                //}


                //if (args.buildingId === 0) {
                //    // display all buildings
                //} else {
                //    if (args.floorId === 0) {
                //        // display all floors
                //    } else {
                //        if (args.unitId === 0) {
                //            // display all units
                //            if (item.indent !== 3) {
                //                return false;
                //            }
                //        } else {
                //            if (item.indent !== 3 && item.itemId !== args.unitId) {
                //                return false;
                //            }
                //        }

                //        if (item.indent !== 2 && item.itemId != args.floorId) {
                //            return false;
                //        }
                //    }
                //}

            //}

            if (item.parent != null) {
                var parent = data[item.parent];
                while (parent) {
                    if (parent._collapsed) {
                        return false;
                    }

                    parent = data[parent.parent];
                }
            }

            return true;
        }

        function treeFilter(item, args) {
            if (args.locationId === 0) {
                return true;
            }

            if (item.indent === 0 && item.itemId !== args.locationId) {
                return false;
            }

            if (item.parent !== null) {
                var parent = data[item.parent];

                while (parent) {
                    if (parent._collapsed || parent['itemId'] !== percentCompleteThreshold) {
                        return false;
                    }
                }
            }



            return true;
        }

        $(function () {

            var paramObj = {
                locationId: 0
            };
            var url = '@Url.Action("GetTreeGridJson", "Master")';

            $.getJSON(url, paramObj, function (response, status, xhr) {
                
                // hides meaniless columns
                columns = $.grep(response.columns, function (col, idx) {
                    return col.field === 'itemId' || col.field === 'parent' || col.field === 'indent' || col.field === 'id' || col.field === 'createdDate' || col.field === 'updatedDate'
                }, true);

                columns.sort(function (col1, col2) {
                    return col1.field.localeCompare(col2.field);
                });

                columns[0].formatter = NodeNameFormatter;

                grid.setColumns(columns);

                data = response.data;

                dataView.beginUpdate();

                dataView.setItems(data);

                //dataView.setFilterArgs({
                //    locationId: filterLocationId,
                //    buildingId: filterBuildingId,
                //    floorId: filterFloorId,
                //    unitId: filterUnitId
                //});
                //dataView.setFilter(treeFilter);
                dataView.setFilter(myFilter);

                dataView.endUpdate();
            });

            dataView = new Slick.Data.DataView({ inlineFilters: true });

            grid = new Slick.Grid("#masterGrid", dataView, columns, options);
            grid.onClick.subscribe(function (e, args) {
                if ($(e.target).hasClass("toggle")) {
                    var item = dataView.getItem(args.row);
                    if (item) {
                        if (!item._collapsed) {
                            item._collapsed = true;
                        } else {
                            item._collapsed = false;
                        }

                        dataView.updateItem(item.id, item);
                    }

                    e.stopImmediatePropagation();
                }
            });

            dataView.onRowCountChanged.subscribe(function (e, args) {
                grid.updateRowCount();
                grid.render();
            });

            dataView.onRowsChanged.subscribe(function (e, args) {
                grid.invalidateRows(args.rows);
                grid.render();
            });
        });

        function updateFilter() {
            dataView.setFilterArgs({
                locationId: filterLocationId,
                buildingId: filterBuildingId,
                floorId: filterFloorId,
                unitId: filterUnitId
            });

            dataView.refresh();
        }

        function populateDropDown(valueId, dropdownId, dropdownType) {
            var url, request = {};

            switch (dropdownType) {
                case 0:
                    url = '@Url.Action("PopulateBuildingSelectionByLocation", "Common")';
                    request = { locationId: valueId };
                    break;
                case 1:
                    url = '@Url.Action("PopulateFloorSelectionByBuilding", "Common")';
                    request = { buildingId: valueId };
                    break;
                case 2:
                    url = '@Url.Action("PopulateUnitSelectionByFloor", "Common")';
                    request = { floorId: valueId };
                    break;
                default:
                    break;
            }

            $.getJSON(url, request, function (selectItems) {
                var dropDownEle = $(dropdownId);
                dropDownEle.find('option').remove().end();

                $.each(selectItems, function (i, option) {
                    dropDownEle.append($("<option />").val(option.Id).text(option.Name));
                });

                //"<option value='0' selected='selected'></option>"
                //dropDownEle.prepend($("<option selected='selected' />").val(0).text('All'));

                //if (subLocations.length > 0) {
                //    $.each(subLocations, function (i, subLocation) {
                //        subLocationDropDown.append($("<option />").val(subLocation.Id).text(subLocation.Name));
                //    });

                //    $('select#ddownSubLocationSelection option:first-child').attr("selected", "selected");
                //    $('select#ddownSubLocationSelection').trigger('change');
                //} else {
                //    subLocationDropDown.append($("<option />").val(0).text("Please select a Sub-Location"));
                //}
            });
        }
    </script>
}